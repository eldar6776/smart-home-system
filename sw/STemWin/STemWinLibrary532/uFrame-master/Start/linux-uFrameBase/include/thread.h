/*****************************************************************************
	许继电气股份有限公司			版权：2008-2015

	本源代码及其相关文档为河南许昌许继电气股份有限公司独家所有，未经明文许
	可不得擅自修改或发布，否则将追究相关的法律责任。

						河南许昌许继股份有限公司
						www.xjgc.com
						(0374) 321 2924
*****************************************************************************/

/******************************************************************************
	项目名称	：SGE800计量智能终端平台
	文件		：thread.h
	描述		：本文件定义了线程操作模块接口
	版本		：0.1
	作者		：万鸿俊
	创建日期	：2009.12
******************************************************************************/
	
#ifndef _THREAD_H
#define _THREAD_H

#include "typedef.h"
/*************************************************
  宏定义
*************************************************/
//线程模式
#define THREAD_MODE_NORMAL 			0			//普通线程
#define THREAD_MODE_REALTIME		1			//实时线程


/*************************************************
  结构类型定义
*************************************************/




/*************************************************
  API
*************************************************/
/******************************************************************************
*	函数:	thread_create
*	功能:	建立线程
*	参数:	id				-	线程号
 			function		-	线程函数
 			arg				-	线程函数参数
 			mode			-	线程模式（普通和实时）
 			prio			-	优先级（1-99）
*	返回:	0				-	成功
 			-ERR_NOINIT		-	模块未初始化
 			-ERR_INVAL		-	参数不正确
 			-ERR_BUSY		-	线程已存在
 			-ERR_NOMEM		-	内存不足
*	说明:	只有实时模式支持优先级，99为最高优先级。普通模式优先级固定为0。
 ******************************************************************************/
int thread_create(u8 id, void * (*function)(void *), void *arg, u8 mode, u8 prio);

/******************************************************************************
*	函数:	thread_cancel
*	功能:	终止线程
*	参数:	id				-	线程号
*	返回:	0				-	成功
 			-ERR_NODEV		-	无此线程
 			-ERR_INVAL		-	参数错误
*	说明:
 ******************************************************************************/
int thread_cancel(u8 id);

/******************************************************************************
*	函数:	thread_setpriority
*	功能:	设置优先级
*	参数:	id				-	线程号
 			prio			-	优先级
*	返回:	0				-	成功
 			-ERR_NODEV		-	无此线程
 			-ERR_INVAL		-	参数错误
*	说明:	优先级为1-99，99为最高优先级
 ******************************************************************************/
int thread_setpriority(u8 id, u8 prio);

/******************************************************************************
*	函数:	thread_getpriority
*	功能:	获取优先级
*	参数:	id				-	线程号
 			prio			-	优先级（数据传出）
*	返回:	0				-	成功
 			-ERR_NODEV		-	无此线程
 			-ERR_INVAL		-	参数错误
*	说明:	实时线程优先级为1-99，99为最高优先级；普通线程固定为0。
 ******************************************************************************/
int thread_getpriority(u8 id, u8 *prio);

/******************************************************************************
*	函数:	thread_gettid_fromid
*	功能:	根据内部线程号得到系统线程号
*	参数:	id				-	线程号
 			prio			-	优先级（数据传出）
*	返回:	0				-	此内部线程号未用
			>0				-	系统线程号
 			-ERR_INVAL		-	参数错误
*	说明:
 ******************************************************************************/
int thread_gettid_fromid(u8 id);

/******************************************************************************
*	函数:	thread_create_base
*	功能:	建立线程
*	参数:	tid				-	系统线程号
 			function		-	线程函数
 			arg				-	线程函数参数
 			mode			-	线程模式（普通和实时）
 			prio			-	优先级（1-99）
*	返回:	0				-	成功
 			-ERR_INVAL		-	参数不正确
 			-ERR_NOMEM		-	内存不足
*	说明:	只有实时模式支持优先级，99为最高优先级。普通模式优先级固定为0。
 ******************************************************************************/
int thread_create_base(pthread_t *tid, void *(*function)(void *), void *arg, u8 mode, u8 prio);

/******************************************************************************
*	函数:	thread_setpriority_base
*	功能:	设置线程优先级
*	参数:	tid				-	系统线程号
 			prio			-	优先级
*	返回:	0				-	成功
 			-ERR_INVAL		-	参数错误
*	说明:	优先级为1-99，99为最高优先级。
 ******************************************************************************/
int thread_setpriority_base(pthread_t tid, u8 prio);

/******************************************************************************
*	函数:	thread_gettid_base
*	功能:	得到当前系统线程号
*	参数:	void
*	返回:	*				-	系统线程号
*	说明:
 ******************************************************************************/
int thread_gettid_base(void);

#endif  /* _THREAD_H */

